using System.Text.RegularExpressions;
using Content.Client.Message;
using Content.Shared.Administration.Logs;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;

namespace Content.Client.Administration.UI.Logs.Entries;

[GenerateTypedNameReferences]
public sealed partial class AdminLogEntry : BoxContainer
{
    public SharedAdminLog Log { get; }

    public AdminLogEntry(ref SharedAdminLog log)
    {
        RobustXamlLoader.Load(this);

        Log = log;
        Message.SetMessage($"{log.Date:HH:mm:ss}: {log.Message}");

        DetailsHeading.OnToggled += DetailsToggled;
    }

    /// <summary>
    /// Sets text to be highlighted from a search result.
    /// </summary>
    public void HighlightResults(Regex highlightRegex, Color color)
    {
        if (Message.GetMessage() is not { } message)
            return;

        // Want to avoid highlighting smaller strings
        if (highlightRegex.ToString().Length < 5)
            return;

        Message.SetMarkupPermissive(highlightRegex.Replace(message, $"[color={color.ToHex()}]$1[/color]", 3));
    }

    /// <summary>
    /// We perform some extra calculations in the dropdown, so we want to render that only when
    /// the dropdown is actually opened.
    /// This also removes itself from the event listener so it doesn't trigger again.
    /// </summary>
    private void DetailsToggled(BaseButton.ButtonToggledEventArgs args)
    {
        if (!args.Pressed || DetailsBody.ChildCount > 0)
            return;
        DetailsBody.AddChild(new AdminLogEntryDetails(Log));
        DetailsHeading.OnToggled -= DetailsToggled;
    }
}
